name: CI-build-image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name:
        run: |
          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          FULL_REPO_SLUG=`echo "${{github.event.pull_request.head.repo.full_name}}" | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=FULL_REPO_SLUG::$(echo $FULL_REPO_SLUG)

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Cache image.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: built-image
          key: $FULL_REPO_SLUG
      - name: If NOT found in cache, Build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          echo "building"
          docker build -t hello_world:$BRANCH_NAME .
          mkdir -p built-image
          docker save hello_world:$BRANCH_NAME > built-image/hello_world.tar
      - name: If found in cache, print and load
        if: steps.cache-image.outputs.cache-hit == 'true'
        run: |
          ls -lah built-image/
          docker load < built-image/hello_world.tar

  run-image:
    runs-on: ubuntu-latest
    needs:
      - build-image
    steps:
      - name: Cache image.
          id: cache-image
          uses: actions/cache@v2
          with:
            path: built-image
            key: $FULL_REPO_SLUG
      - name: If no cached image found
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          echo "Expected to find image from cache $FULL_REPO_SLUG"
          - exit -1
      - name: Load image
        if: steps.cache-image.outputs.cache-hit == 'true'
        run: |
          ls -lah built-image/
          docker load < built-image/hello_world.tar
      - name: Run image!!
        run: |
          docker image ls
          docker run hello_world:$BRANCH_NAME





